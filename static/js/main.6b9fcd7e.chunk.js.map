{"version":3,"sources":["Sketch.js","scripts/GosperGlider.js","App.js","serviceWorker.js","index.js"],"names":["maybeMobileSite","Sketch","props","sketch","p","ctx","setup","createCanvas","gameAreaWidth","gameAreaHeight","frameRate","background","drawGrid","setupRandomGrid","draw","fillCells","paused","nextGeneration","touchStarted","noLoop","loop","keyPressed","keyCode","mouseDragged","row","parseInt","mouseY","col","mouseX","makeAlive","redraw","mouseClicked","state","gameAreaRef","React","createRef","activeCells","Set","rows","cols","gameAreaNode","this","current","getBoundingClientRect","height","width","p5","id","ref","stroke","i","j","line","gg","lines","split","cells","maxCol","l","includes","Math","max","lastIndexOf","length","push","slice","getGosperGlider","OFFSET","_","zip","add","toHash","h","noStroke","has","fill","rect","CELL_SIZE","newAlive","isAlive","n","countAliveNeighbors","dx","dy","nrow","ncol","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b9fcd7e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport p5 from \"p5\";\nimport _ from \"lodash\";\nimport { getGosperGlider } from \"./scripts/GosperGlider\";\nimport \"./Sketch.css\";\n\nconst GAME_HEIGHT_PER = 1;\nconst GAME_WIDTH_PER = 1;\nconst FRAME_RATE = 10;\nconst CELL_SIZE = 15;\nconst CELL_PADDING = CELL_SIZE / 10;\n\nconst ALIVE_COLOR = \"#ffff99\";\nconst CANVAS_BG = \"#808080\";\nconst GRID_LINE_COLOR = \"#d9d9d9\";\n\nlet maybeMobileSite = false;\n\nclass Sketch extends Component {\n  sketch = (p) => {\n    this.ctx = p;\n\n    p.setup = () => {\n      this.ctx.createCanvas(this.gameAreaWidth, this.gameAreaHeight);\n      this.ctx.frameRate(FRAME_RATE);\n      this.ctx.background(CANVAS_BG);\n      this.drawGrid();\n      this.setupRandomGrid();\n    };\n\n    p.draw = () => {\n      this.fillCells();\n      if (!this.paused) {\n        this.nextGeneration();\n      }\n    };\n\n    // Mobile site events\n\n    if (maybeMobileSite) {\n      p.touchStarted = () => {\n        this.paused = !this.paused;\n        if (this.paused) this.ctx.noLoop();\n        else this.ctx.loop();\n        return false;\n      };\n    }\n\n    // Desktop events\n\n    p.keyPressed = () => {\n      if (this.ctx.keyCode === 32) {\n        this.paused = !this.paused;\n        if (this.paused) this.ctx.noLoop();\n        else this.ctx.loop();\n      }\n      return false;\n    };\n\n    p.mouseDragged = () => {\n      if (this.paused) {\n        let row = parseInt(this.ctx.mouseY / CELL_SIZE);\n        let col = parseInt(this.ctx.mouseX / CELL_SIZE);\n        this.makeAlive(row, col);\n        this.ctx.redraw();\n      }\n      return false;\n    };\n\n    p.mouseClicked = () => {\n      if (this.paused) {\n        let row = parseInt(this.ctx.mouseY / CELL_SIZE);\n        let col = parseInt(this.ctx.mouseX / CELL_SIZE);\n        this.makeAlive(row, col);\n        this.ctx.redraw();\n      }\n      return false;\n    };\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.gameAreaRef = React.createRef();\n\n    this.ctx = null;\n    this.activeCells = new Set();\n    this.paused = false;\n    this.rows = this.cols = 0;\n  }\n\n  componentDidMount() {\n    const gameAreaNode = this.gameAreaRef.current.getBoundingClientRect();\n    this.gameAreaHeight = gameAreaNode.height * GAME_HEIGHT_PER;\n    this.gameAreaWidth = gameAreaNode.width * GAME_WIDTH_PER;\n    if (this.gameAreaWidth < 500) {\n      maybeMobileSite = true;\n    }\n    this.rows = parseInt(this.gameAreaHeight / CELL_SIZE) + 1;\n    this.cols = parseInt(this.gameAreaWidth / CELL_SIZE) + 1;\n    this.p5 = new p5(this.sketch, this.gameAreaRef.current);\n  }\n\n  render() {\n    return <div id=\"sketch\" ref={this.gameAreaRef}></div>;\n  }\n\n  drawGrid() {\n    this.ctx.stroke(GRID_LINE_COLOR);\n    for (let i = 0; i < this.rows; ++i) {\n      for (let j = 0; j < this.cols; ++j) {\n        this.ctx.line(\n          j * CELL_SIZE,\n          i * CELL_SIZE,\n          j * CELL_SIZE,\n          (i + 1) * CELL_SIZE\n        );\n        this.ctx.line(\n          j * CELL_SIZE,\n          i * CELL_SIZE,\n          (j + 1) * CELL_SIZE,\n          i * CELL_SIZE\n        );\n      }\n    }\n    this.ctx.stroke(\"black\");\n  }\n\n  setupRandomGrid() {\n    let gg = getGosperGlider();\n    let OFFSET = 15;\n    if (maybeMobileSite) {\n      gg = _.zip(...gg);\n      OFFSET = 4;\n    }\n    for (let i = 0; i < gg.length; ++i) {\n      for (let j = 0; j < gg[i].length; ++j) {\n        if (gg[i][j]) {\n          this.activeCells.add(this.toHash(i + OFFSET, j + OFFSET));\n        }\n      }\n    }\n  }\n\n  toHash(row, col) {\n    return row * this.cols + col;\n  }\n\n  fromHash(h) {\n    return [parseInt(h / this.cols), h % this.cols];\n  }\n\n  fillCells() {\n    this.ctx.noStroke();\n    for (let i = 2; i < this.rows + 2; ++i) {\n      for (let j = 2; j < this.cols + 2; ++j) {\n        if (this.activeCells.has(this.toHash(i, j))) {\n          this.ctx.fill(ALIVE_COLOR);\n          this.ctx.rect(\n            (j - 2) * CELL_SIZE + CELL_PADDING,\n            (i - 2) * CELL_SIZE + CELL_PADDING,\n            CELL_SIZE - 2 * CELL_PADDING,\n            CELL_SIZE - 2 * CELL_PADDING\n          );\n          this.ctx.fill(\"white\");\n        } else {\n          this.ctx.fill(CANVAS_BG);\n          this.ctx.rect(\n            (j - 2) * CELL_SIZE + CELL_PADDING,\n            (i - 2) * CELL_SIZE + CELL_PADDING,\n            CELL_SIZE - 2 * CELL_PADDING,\n            CELL_SIZE - 2 * CELL_PADDING\n          );\n          this.ctx.fill(\"white\");\n        }\n      }\n    }\n    this.ctx.stroke(\"black\");\n    this.ctx.fill(\"white\");\n  }\n\n  nextGeneration() {\n    let newAlive = new Set();\n    for (let i = 0; i < this.rows + 4; ++i) {\n      for (let j = 0; j < this.cols + 4; ++j) {\n        if (this.isAlive(i, j)) {\n          newAlive.add(this.toHash(i, j));\n        }\n      }\n    }\n    this.activeCells = newAlive;\n  }\n\n  isAlive(row, col) {\n    let n = this.countAliveNeighbors(row, col);\n    if (this.activeCells.has(this.toHash(row, col))) {\n      return n > 1 && n < 4;\n    } else {\n      return n === 3;\n    }\n  }\n\n  countAliveNeighbors(row, col) {\n    let n = 0;\n    for (let dx of [-1, 0, 1]) {\n      for (let dy of [-1, 0, 1]) {\n        if (dx === 0 && dy === 0) continue;\n        let nrow = row + dx;\n        let ncol = col + dy;\n        if (\n          nrow < 0 ||\n          ncol < 0 ||\n          nrow >= this.rows + 4 ||\n          ncol >= this.cols + 4\n        )\n          continue;\n        if (this.activeCells.has(this.toHash(nrow, ncol))) n++;\n      }\n    }\n    return n;\n  }\n\n  makeAlive(row, col) {\n    let h = this.toHash(row + 2, col + 2);\n    this.activeCells.add(h);\n  }\n}\n\nexport default Sketch;\n","// Copied from https://github.com/Peter-Slump/game-of-life/blob/master/patterns/gosper-glider-gun.txt\nconst gosperGlider = `........................X...........................................................................\n......................X.X...........................................................................\n............XX......XX............XX................................................................\n...........X...X....XX............XX................................................................\nXX........X.....X...XX..............................................................................\nXX........X...X.XX....X.X...........................................................................\n..........X.....X.......X...........................................................................\n...........X...X....................................................................................\n............XX......................................................................................\n....................................................................................................\n....................................................................................................\n`;\n\nexport let getGosperGlider = () => {\n  let lines = gosperGlider.split(\"\\n\");\n  let cells = [];\n  let maxCol = 0;\n  for (let l of lines) {\n    if (!l.includes(\"X\")) break;\n\n    let row = [];\n    maxCol = Math.max(l.lastIndexOf(\"X\"), maxCol);\n    for (let i = 0; i < l.length; ++i) {\n      row.push(l[i] === \"X\" ? true : false);\n    }\n    cells.push(row);\n  }\n  for (let i = 0; i < cells.length; ++i) {\n    cells[i] = cells[i].slice(0, maxCol + 1);\n  }\n  return cells;\n};\n","import React, { Component } from \"react\";\nimport Sketch from \"./Sketch\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div id=\"app\">\n        <Sketch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}